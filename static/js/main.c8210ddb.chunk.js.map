{"version":3,"sources":["MembraneComponents.js","App.js","serviceWorker.js","index.js"],"names":["createCSV","state","data","string","string1","string2","key","slice","stateToCSV","keys","Object","i","length","j","MembraneAPI","props","membrane","valveConstants","molarMass","modelParameters","a","b","d","options","default_option","_onSelect","bind","onPermValv","onFeedValv","onBufferValv","params","tmp","flowrate","this","membrane_selected","dex_rej","rb_rej","surface_area","buffer_dex_conc","b_dex_conc","buffer_rb_conc","b_rb_conc","permeate_dex_mass","p_dex_conc","p_init_mass","permeate_dex_conc","feed_dex_conc","f_dex_conc","feed_dex_mass","f_init_mass","permeate_rb_mass","p_rb_conc","permeate_rb_conc","feed_rb_conc","f_rb_conc","feed_rb_mass","volume_system","flow_rate","flow_rates","time_array","total_perm_vol","interval","runtime","push","perm_flow","delta_dex_mass","Math","exp","delta_rb_mass","buffer_dex_added","buffer_rb_added","permeate_valve","permeate_closed_tmp_percentage_loss_per_hour","feed_valve","feed_open_volume_percentage_loss_per_hour","buffer_valve","buffer_closed_volume_percentage_loss_per_hour","e","preventDefault","result","handleCalculations","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","option","setState","event","target","value","Form","className","TextField","id","label","onChange","parseFloat","getElementById","helperText","parseInt","style","display","name","b_init_mass","onClick","downloadCSVFile","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8210ddb.chunk.js","sourcesContent":["// Import the necessary packages\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\nimport TextField from '@material-ui/core/TextField';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\n\n// THIS SHOULD BE THE SAME MODEL THAT WAS TRAINED UPON\nfunction getFlux(params, tmp, flowrate) {\n    return (flowrate * params['a']) / (tmp - flowrate * params['b']) + flowrate * params['d']\n}\n\n// Create the header of the CSV\nfunction stateToCSV(state) {\n    let string1 = \"\";\n    let string2 = \"\";\n    for (let key in state) {\n        string1 += key + ',';\n        string2 += state[key] + ',';\n    }\n    return string1.slice(0, -1) + '\\n' + string2.slice(0, -1)\n}\n\n// Create a comma delimited string from the state and data\nfunction createCSV(state, data) {\n    let string = stateToCSV(state) + '\\n\\n';\n    let keys = Object.keys(data);\n    for (let i = 0; i < keys.length; i++) {\n        string += keys[i] + ','\n    }\n    string = string.slice(0, string.length - 1) + '\\n';\n    for (let i = 0; i < data[keys[0]].length; i++){\n        for (let j = 0; j < keys.length; j++) {\n            string += data[keys[j]][i] + ','\n        }\n        string = string.slice(0, string.length - 1) + '\\n';\n    }\n    return string\n}\n\n\nexport class MembraneAPI extends React.Component {\n\n    // This is run at the start of the webpage loading\n    constructor(props) {\n        super(props);\n\n        // These are the inputs, saved in the 'state' of MembraneAPI\n        this.state = {\n            'permeate_valve': true,\n            'feed_valve': false,\n            'buffer_valve': true,\n            'p_init_mass': 0,\n            'membrane_selected': '1'\n        };\n\n        // This is where each of the different membrane details are set\n        this.membrane = {\n            '1': {'dex_rej': 0.92, 'rb_rej': 0.01, 'surface_area': 1},\n            '2': {'dex_rej': 0.92, 'rb_rej': 0.1, 'surface_area': 1},\n            '3': {'dex_rej': 0.65, 'rb_rej': 0.01, 'surface_area': 1}\n        };\n\n        // Here is where we define the \"loss\" functions for incorrect valve position\n        this.valveConstants = {\n            'buffer_closed_volume_percentage_loss_per_hour': 0.1,\n            'feed_open_volume_percentage_loss_per_hour': 0.2,\n            'permeate_closed_tmp_percentage_loss_per_hour': 0.3\n        };\n\n        this.molarMass = {\n            'dex': 504.4,\n            'rb': 479.02\n        };\n\n        // THESE ARE THE PARAMETERS OF THE MODEL\n        this.modelParameters = {a: -0.002749688274522191, b: -8.301768508494198e-05, d: 0.03741113513434366};\n\n        this.options = ['1', '2', '3'];\n        this.default_option = this.options[0];\n        this._onSelect = this._onSelect.bind(this);\n        this.onPermValv = this.onPermValv.bind(this);\n        this.onFeedValv = this.onFeedValv.bind(this);\n        this.onBufferValv = this.onBufferValv.bind(this);\n    }\n\n    handleCalculations(){\n        let membrane = this.membrane[this.state.membrane_selected];\n\n        // Membrane data\n        let dex_rej = membrane['dex_rej'];\n        let rb_rej = membrane['rb_rej'];\n        let surface_area = membrane['surface_area'];\n\n        // Buffer initial conditions (these are constants)\n        let buffer_dex_conc = this.state.b_dex_conc;\n        let buffer_rb_conc = this.state.b_rb_conc;\n\n        // Permeate initial conditions\n        let permeate_dex_mass = [this.state.p_dex_conc * this.state.p_init_mass / 1000 * this.molarMass['dex']]; // we do this b/c density is 1\n        let permeate_dex_conc = [this.state.p_dex_conc];\n\n        // Feed initial conditions\n        let feed_dex_conc = [this.state.f_dex_conc];\n        let feed_dex_mass = [this.state.f_dex_conc * this.state.f_init_mass / 1000 * this.molarMass['dex']]; // we do this b/c density is 1\n\n        // Permeate initial conditions\n        let permeate_rb_mass = [this.state.p_rb_conc * this.state.p_init_mass / 1000 * this.molarMass['rb']]; // we do this b/c density is 1\n        let permeate_rb_conc = [this.state.p_rb_conc];\n\n        // Feed initial conditions\n        let feed_rb_conc = [this.state.f_rb_conc];\n        let feed_rb_mass = [this.state.f_rb_conc * this.state.f_init_mass / 1000 * this.molarMass['rb']]; // we do this b/c density is 1\n\n        // Initial volume of system (aka what is in the feed)\n        let volume_system = this.state.f_init_mass;\n\n        // Flow rate of the system\n        let flow_rate = this.state.flow_rate;\n\n        // Keep track of the flow rates and the intervals\n        let flow_rates = [0];\n        let time_array = [0];\n\n        let total_perm_vol = 0;\n        // Iterate through each interval, and make the calculations\n        for (let i = this.state.interval; i < this.state.runtime/this.state.interval; i+=this.state.interval) {\n            time_array.push(i);\n            // Permeate flow is the flow rate out of the system (into the permeate) for a given interval\n            // Let perm_flow be in mL (and assume the model is trained on that fact)\n            let perm_flow = getFlux(this.modelParameters, this.state.tmp, this.state.flow_rate) * surface_area * this.state.interval;\n\n            total_perm_vol += perm_flow;\n            // We keep track of this\n            flow_rates.push(perm_flow);\n            // We now want to know the mass of dex leaving\n            // Conc_out = Conc_orig * exp(-(1-R) * (perm_flow / flow_rate)\n            // We then convert it to mass by multiplying it by the flowrate b/c density = 1\n            let delta_dex_mass = feed_dex_conc[feed_dex_conc.length - 1] * Math.exp(-(1 - dex_rej) * (perm_flow / flow_rate)) * perm_flow / 1000 * this.molarMass['dex'];\n            let delta_rb_mass = feed_rb_conc[feed_rb_conc.length - 1] * Math.exp(-(1 - rb_rej) * (perm_flow / flow_rate)) * perm_flow / 1000 * this.molarMass['rb'];\n\n            // Perm flow out = buffer flow in\n            let buffer_dex_added = perm_flow * buffer_dex_conc / 1000 * this.molarMass['dex'];\n            let buffer_rb_added = perm_flow * buffer_rb_conc / 1000 * this.molarMass['rb'];\n\n            // We now convert to mass to correctly remove it from the overall flow\n            permeate_dex_conc.push((permeate_dex_mass[permeate_dex_mass.length - 1] + delta_dex_mass) / (total_perm_vol * this.molarMass['dex']));\n            permeate_rb_conc.push((permeate_rb_mass[permeate_rb_mass.length - 1] + delta_rb_mass) / (total_perm_vol * this.molarMass['rb']));\n\n            // We add in the mass of the substances that have passed through the filter\n            permeate_dex_mass.push(permeate_dex_mass[permeate_dex_mass.length - 1] + delta_dex_mass);\n            permeate_rb_mass.push(permeate_rb_mass[permeate_rb_mass.length - 1] + delta_rb_mass);\n\n\n            // We can simply remove the mass from the feed\n            feed_dex_mass.push(feed_dex_mass[feed_dex_mass.length - 1] - delta_dex_mass + buffer_dex_added);\n            // Since the volume of the system remains constant\n            feed_dex_conc.push(feed_dex_mass[feed_dex_mass.length - 1] / (volume_system * this.molarMass['dex']));\n\n            // We can simply remove the mass from the feed\n            feed_rb_mass.push(feed_rb_mass[feed_rb_mass.length - 1] - delta_rb_mass + buffer_rb_added);\n            // Since the volume of the system remains constant\n            feed_rb_conc.push(feed_rb_mass[feed_rb_mass.length - 1] / (volume_system * this.molarMass['rb']));\n\n            // If any of the valves are in the incorrect position, we want to lower volume of system / tmp\n            if (!this.state.permeate_valve) {\n                this.state.tmp = this.state.tmp - this.state.tmp * this.state.interval / 60 * this.valveConstants.permeate_closed_tmp_percentage_loss_per_hour;\n            }\n            if (this.state.feed_valve) {\n                flow_rate = flow_rate - flow_rate * this.state.interval / 60 * this.valveConstants.feed_open_volume_percentage_loss_per_hour;\n            }\n            if (!this.state.buffer_valve) {\n                flow_rate = flow_rate - flow_rate * this.state.interval / 60 * this.valveConstants.buffer_closed_volume_percentage_loss_per_hour;\n            }\n\n        }\n\n        // Return the arrays of all of this data\n        return {'time': time_array, 'permeate_dex_mass': permeate_dex_mass, 'permeate_dex_conc': permeate_dex_conc, 'flow_rates': flow_rates,\n        'feed_dex_conc': feed_dex_conc, 'feed_dex_mass': feed_dex_mass, 'permeate_rb_mass': permeate_rb_mass, 'permeate_rb_conc': permeate_rb_conc,\n            'feed_rb_conc': feed_rb_conc, 'feed_rb_mass': feed_rb_mass}\n    }\n\n    // This gets run when the user clicks on the submit button\n    // It will run the calculations, then add them all to a CSV file and send it to the browser to download\n    downloadCSVFile(e){\n        // This prevents the page from being refreshed when clicked\n        e.preventDefault();\n        // This is where the simulation is run\n        let result = this.handleCalculations();\n        // We have to create an object to download\n        const element = document.createElement(\"a\");\n        // Create the CSV file from it\n        const file = new Blob([createCSV(this.state, result)],\n            {type: 'text/plain;charset=utf-8'});\n        // Associate the new object's link with the file created\n        element.href = URL.createObjectURL(file);\n        element.download = \"membrane_data.csv\";\n        document.body.appendChild(element);\n        // Simulate a click to download the file\n        element.click();\n        return false;\n    };\n\n    // Not super important functions\n    _onSelect (option) {\n        this.setState({membrane_selected: option['value']});\n    }\n\n    onPermValv(event) {\n        this.setState({permeate_valve: event.target.value === 'on'});\n    }\n\n    onFeedValv(event) {\n        this.setState({feed_valve: event.target.value === 'on'});\n    }\n\n    onBufferValv(event) {\n        this.setState({buffer_valve: event.target.value === 'on'});\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <Form>\n                    <div>\n                        <h5 className=\"intro_header\">Operating Parameters</h5>\n                        <TextField id=\"flow_rate\" label=\"Volumetric Flow Rate\"\n                                   onChange={()=>{this.state.flow_rate = parseFloat(document.getElementById('flow_rate').value)}}\n                                    helperText=\"Volumetric Flow Rate of Recirculation (mL/min)\"/>\n                        <TextField id=\"tmp\" label=\"TMP\"\n                                   onChange={()=>{this.state.tmp = parseFloat(document.getElementById('tmp').value)}}\n                                   helperText=\"Transmembrane Pressure (bar)\"/>\n                        <TextField id=\"runtime\" label=\"Runtime\"\n                                   onChange={()=>{this.state.runtime = parseInt(document.getElementById('runtime').value)}}\n                                   helperText=\"Experimental Runtime (minutes)\"/>\n                        <TextField id=\"interval\" label=\"Intervals\"\n                                   onChange={()=>{this.state.interval = parseFloat(document.getElementById('interval').value)}}\n                                   helperText=\"Length of Interval (minutes)\"/>\n                    </div>\n                    <div>\n                        <h5 className=\"intro_header\">Permeate Reservoir</h5>\n                        <div className=\"radio-div\">\n                            <div>Valve</div>\n                            <div onChange={this.onPermValv} style={{display:'flex', 'flex-direction':'column'}}>\n                                <div>\n                                    <input type=\"radio\" value='on' name='perm_valv'/> Open\n                                </div>\n                                <div>\n                                    <input type=\"radio\" value='off' name='perm_valv'/> Closed\n                                </div>\n                            </div>\n                        </div>\n                        <TextField id=\"p_init_mass\" label=\"Mass\"\n                                   onChange={()=>{this.state.p_init_mass = parseFloat(document.getElementById('p_init_mass').value)}}\n                                   helperText=\"Permeate Initial Mass (g)\"/>\n                        <TextField id=\"p_rb_conc\" label=\"RB\"\n                                   onChange={()=>{this.state.p_rb_conc = parseFloat(document.getElementById('p_rb_conc').value)}}\n                                   helperText=\"Permeate RB Concentration (mol/L)\"/>\n                        <TextField id=\"p_dex_conc\" label=\"Dextran\"\n                                   onChange={()=>{this.state.p_dex_conc = parseFloat(document.getElementById('p_dex_conc').value)}}\n                                   helperText=\"Permeate Dextran Concentration (mol/L)\"/>\n\n                    </div>\n                    <div>\n                        <h5 className=\"intro_header\">Feed Reservoir</h5>\n                        <div className=\"radio-div\">\n                            <div>Valve</div>\n                            <div onChange={this.onFeedValv} style={{display:'flex', 'flex-direction':'column'}}>\n                                <div>\n                                    <input type=\"radio\" value='on' name='feed_valv'/> Open\n                                </div>\n                                <div>\n                                    <input type=\"radio\" value='off' name='feed_valv'/> Closed\n                                </div>\n                            </div>\n                        </div>\n                        <TextField id=\"f_init_mass\" label=\"Mass\"\n                                   onChange={()=>{this.state.f_init_mass = parseFloat(document.getElementById('f_init_mass').value)}}\n                                   helperText=\"Feed Initial Mass (g)\"/>\n                        <TextField id=\"f_rb_conc\" label=\"RB\"\n                                   onChange={()=>{this.state.f_rb_conc = parseFloat(document.getElementById('f_rb_conc').value)}}\n                                   helperText=\"Feed RB Concentration (mol/L)\"/>\n                        <TextField id=\"f_dex_conc\" label=\"Dextran\"\n                                   onChange={()=>{this.state.f_dex_conc = parseFloat(document.getElementById('f_dex_conc').value)}}\n                                   helperText=\"Feed Dextran Concentration (mol/L)\"/>\n                    </div>\n                    <div>\n                        <h5 className=\"intro_header\">Buffer Reservoir</h5>\n                        <div className=\"radio-div\">\n                            <div>Valve</div>\n                            <div onChange={this.onBufferValv} style={{display:'flex', 'flex-direction':'column'}}>\n                                <div>\n                                    <input type=\"radio\" value='on' name='buffer_valv'/> Open\n                                </div>\n                                <div>\n                                    <input type=\"radio\" value='off' name='buffer_valv'/> Closed\n                                </div>\n                            </div>\n                        </div>\n                        <TextField id=\"b_init_mass\" label=\"Mass\"\n                                   onChange={()=>{this.state.b_init_mass = parseFloat(document.getElementById('b_init_mass').value)}}\n                                   helperText=\"Buffer Initial Mass (g)\"/>\n                        <TextField id=\"b_rb_conc\" label=\"RB\"\n                                   onChange={()=>{this.state.b_rb_conc = parseFloat(document.getElementById('b_rb_conc').value)}}\n                                   helperText=\"Buffer RB Concentration (mol/L)\"/>\n                        <TextField id=\"b_dex_conc\" label=\"Dextran\"\n                                   onChange={()=>{this.state.b_dex_conc = parseFloat(document.getElementById('b_dex_conc').value)}}\n                                   helperText=\"Buffer Dextran Concentration (mol/L)\"/>\n                    </div>\n                    <div>\n                        <h5 className=\"intro_header\">Membrane Selection</h5>\n                        <Dropdown className='dropdown' options={this.options} onChange={this._onSelect} value={this.default_option}/>\n                    </div>\n                    <button className='submit' onClick={this.downloadCSVFile.bind(this)}>Download</button>\n                </Form>\n            </div>\n        )\n    }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport { MembraneAPI } from './MembraneComponents'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n      <div className=\"base-app\">\n        <MembraneAPI>temp</MembraneAPI>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}